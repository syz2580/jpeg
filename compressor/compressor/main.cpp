#include <cstdio>
#include <iostream>
#include <iomanip>
#include <fstream>
#include "CJpegCompressor.h"
#include "CJfif.h"
#include "tool.h"
#include <windows.h>

void tryCompress(void);

void try_JfifWrite(void);

void try_JfifRead(void);

int main()
{
    std::ofstream fout("info.txt");
    std::streambuf* s_fout = fout.rdbuf();
    std::streambuf* s_cout = std::cout.rdbuf();
    std::cout.rdbuf(s_fout);
    
    //try_JfifWrite();
    try_JfifRead();
    //tryCompress();
    
    std::cout.rdbuf(s_cout);

    getchar();
    return 0;
}

void tryCompress(void)
{
    int w, h;
    uint8* rgb = ReadBMP("test.bmp", w, h);
    ASSERT(0!=rgb);
    
    CJpegCompressor compressor;
    CJfif *jfif = compressor.Compress(rgb, w, h, 100);
    ASSERT(0 != jfif);
    compressor.PrintInfo();
    jfif->WriteFile("tryCompress.jpg");
    delete jfif;
}

void try_JfifWrite(void)
{
    CJfif *jfif = new CJfif;

    // 1. Size of image
    jfif->SetSize(12,12);

    // 2. DQTs (Define quantize table)
    uint8 dqt_data[64];
    memset(dqt_data, 1, 64);
    jfif->SetDQT(dqt_data, true);
    jfif->SetDQT(dqt_data, false);    

    // 3. DHTs: dc then ac
    uint8 bits_1[16] = {0x0,0x3,0x1,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0};
    uint8 var_1[4] = {0x8, 0x7, 0x5, 0x0};
    jfif->SetDHT(bits_1, var_1, 4, 1, 1);

    uint8 bits_2[16] = {0x0,0x3,0x0,0x3, 0x0,0x2,0x3,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0};
    uint8 var_2[11] = {0x3,0x2,0x1,0x4, 0x5,0x6,0x0,0x12, 0x11,0x22,0x13};
    jfif->SetDHT(bits_2, var_2, 11, 0, 1);
    
    uint8 bits_3[16] = {0x1,0x1,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0};
    uint8 var_3[2] = {0x9,0x8};
    jfif->SetDHT(bits_3, var_3, 2, 1, 0);

    uint8 bits_4[16] = {0x0,0x2,0x2,0x2, 0x1,0x3,0x5,0x0, 0x0,0x0,0x0,0x0, 0x0,0x0,0x0,0x0};
    uint8 var_4[15] = {0x4,0x3,0x5,0x6, 0x2,0x7,0x11,0x12, 0x9,0x41,0x22,0x13, 0x8,0x1,0x0};
    jfif->SetDHT(bits_4, var_4, 15, 0, 0);
    
    // 4. data
    uint8 data[26*8+6]=
    {
        0x55, 0x71, 0xfc, 0x7e, 0xb7, 
        0x8a, 0xd6, 0x9f, 0x57, 0xab, 0x3e, 0x71, 0xf1,
	    0xcf, 0x9c, 0x4d, 0x83, 0xbe, 0xc0, 0x80, 0x29, 
	    0xa1, 0x8a, 0x0c, 0x6c, 0x76, 0x55, 0x6c, 0x7c,
	    0x6c, 0x54, 0xfc, 0xfd, 0x31, 0x47, 0x64, 0xa3, 
	    0xad, 0xed, 0x5f, 0xef, 0x65, 0x91, 0x44, 0xbe,
	    0x98, 0xa2, 0x3f, 0x47, 0xd0, 0x1c, 0x04, 0x43, 
	    0x04, 0xdb, 0xbd, 0xa9, 0x42, 0x61, 0x3a, 0x90,
	    0x45, 0x11, 0x33, 0x8e, 0xc3, 0x20, 0xc8, 0xb6, 
	    0xab, 0xa3, 0xad, 0x8c, 0x8e, 0xb6, 0xab, 0x2d,
	    0x96, 0x5f, 0x8f, 0x31, 0x7a, 0x6e, 0x8c, 0xe2, 
	    0x20, 0x0f, 0xd0, 0x6e, 0xcc, 0x13, 0x23, 0x88,
	    0xc1, 0x2e, 0xd7, 0x38, 0x82, 0x28, 0x88, 0xb5, 
	    0x48, 0x32, 0x0d, 0x8f, 0x55, 0xd1, 0xd6, 0xd5,
	    0x74, 0x69, 0x55, 0x96, 0xd9, 0x67, 0xc7, 0x91, 
	    0x3c, 0x8a, 0x6d, 0x16, 0x89, 0x8b, 0x84, 0xc1,
	    0xf6, 0x0b, 0x01, 0xe5, 0x4a, 0xcd, 0x4a, 0x94, 
	    0xc3, 0x64, 0xe4, 0xcd, 0x67, 0xb8, 0x51, 0xa5,
	    0x33, 0x8e, 0xb7, 0x3b, 0x3e, 0x3e, 0xba, 0x99, 
	    0x97, 0x1e, 0xac, 0xbc, 0xfe, 0x6a, 0x3b, 0x61,
	    0x76, 0xc2, 0xbe, 0x7c, 0x19, 0xbe, 0x6d, 0xdd, 
	    0x93, 0xb2, 0x76, 0xec, 0x06, 0xc8, 0xb0, 0x6c,
	    0x88, 0x08, 0x8a, 0xd8, 0xa2, 0xd6, 0xe2, 0x24, 
	    0xc3, 0x18, 0x61, 0x83, 0x93, 0xca, 0x5c, 0xf9,
	    0x29, 0x23, 0xe5, 0xf2, 0x5b, 0xc8, 0x34, 0x87, 
	    0xac, 0x41, 0xc6, 0x18, 0x71, 0x30, 0x52, 0x95,
	    0x81, 0x0d, 0x69, 0x0e, 0xcd, 0xcb, 0x58, 0xff, 
        0x00
    };
    jfif->SetData(data, 214);

    // write to disk
    jfif->WriteFile("tryWrite.jpg");

    delete jfif;
}

void try_JfifRead(void)
{
    CJfif jfif;
    jfif.ReadFile("test.jpg");
    jfif.WriteFile("tryRead.jpg");
}
